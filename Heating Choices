
#classification using logistic regression, KNN, adaboost, random forest, SVM

import numpy as np
import pandas as pd

import os
import scipy.stats


os.chdir(r"C:\Users\Sakshi's PC\Desktop\DSA\Machine Learning\Mini Project")

df=pd.read_csv("Heating.csv", usecols=range(2,22))

df.info()
df.isnull().sum()


#encoding the object columns

X=pd.DataFrame(df.drop(['depvar'], axis=1))
y=df.iloc[:,0:1]

X=pd.get_dummies(X,columns=['region'])

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_scaled=sc.fit_transform(X)


#principal componenet analysis

from sklearn.decomposition import PCA
pca = PCA(n_components=22)
principalComponents = pca.fit_transform(X_scaled) 


pca.explained_variance_ratio_

import matplotlib.pyplot as plt
cum_exp_var =[]

s=0

for i in pca.explained_variance_ratio_:
    s+=i
    cum_exp_var.append(s)



plt.plot(range(22),cum_exp_var)

X_PCA=principalComponents[:,:10]
pca.explained_variance_ratio_.sum()


from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split


X_train,X_test,y_train,y_test = train_test_split(X_PCA,y,random_state=0)



#logistic regression
from sklearn.linear_model import LogisticRegression
modelLR=LogisticRegression()
modelLR.fit(X_train,y_train)
y_pred_LR = modelLR.predict(X_test)



from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, classification_report


accuracy_score(y_test,y_pred_LR) 

confusion_matrix(y_test,y_pred_LR)
print(classification_report(y_test,y_pred_LR))


#KNN
from sklearn.neighbors import KNeighborsClassifier
model_KNN = KNeighborsClassifier() #in this one we can change the no of k we consider    
 
from sklearn.model_selection import GridSearchCV

#Establishing which parameters to Grid search
param_grid={'n_neighbors':[15,18,19,20,21,22], 'weights':['uniform','distance']}


mdl_KNN=GridSearchCV(model_KNN,param_grid,cv=4)
mdl_KNN.fit(X_PCA,y)
mdl_KNN.best_params_ #{"n_neighbors=19", uniform}
mdl_KNN.best_score_

#fitting KNN

modelKNN = KNeighborsClassifier(n_neighbors=19 ,weights= 'uniform' , metric = 'minkowski', p = 2)

#training
modelKNN.fit(X_train, y_train)

#prediction
y_pred = modelKNN.predict(X_test)

from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, classification_report

#accuracy KNN
accuracy_score (y_test, y_pred)
confusion_matrix (y_test, y_pred)
print(classification_report (y_test, y_pred))








#ADABoost
from sklearn.ensemble import AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier

modelADA=AdaBoostClassifier(DecisionTreeClassifier(max_depth=10))
param_grid={
            'n_estimators': [70,80,90,105],
            'learning_rate':[0.5,0.7,0.9,1,2,3]}

model_ADA= GridSearchCV(modelADA, param_grid, scoring='accuracy', cv=4)

model_ADA.fit(X_PCA,y)
model_ADA.best_params_ #{'learning_rate': 1.0, 'n_estimators': 80}
model_ADA.best_estimator_
model_ADA.best_score_ #.6344



model_ADA=AdaBoostClassifier(DecisionTreeClassifier(max_depth=10), learning_rate= 1.0, n_estimators=80, random_state=0)
model_ADA.fit(X_train,y_train)

y_pred_ADA = model_ADA.predict(X_test)
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, classification_report

#accuracy KNN
accuracy_score (y_test, y_pred_ADA)
confusion_matrix (y_test, y_pred_ADA)
print(classification_report (y_test, y_pred_ADA))









#SVM

from sklearn.svm import SVC
svc_model = SVC(gamma=0.1) #default = rbf
grid_params={'kernel': ['rbf', 'poly', 'linear']}
model_SVC = GridSearchCV(svc_model, grid_params, scoring='accuracy', cv=4)

model_SVC.fit(X_PCA,y)

model_SVC.best_params_ #{'kernel': 'linear'}
model_SVC.best_estimator_
model_SVC.best_score_ #0.6366


model_SVC.fit(X_train,y_train)

y_predsvc = model_SVC.predict(X_test)

#accuracy KNN
accuracy_score (y_test, y_predsvc)
confusion_matrix (y_test, y_predsvc)
print(classification_report (y_test, y_predsvc))






#Random Forest

from sklearn.ensemble import RandomForestClassifier
model_RF=RandomForestClassifier(random_state=2)
grid_params={'max_depth':[6,8,10],
            'n_estimators': [5,10,15,20,25,30]}
mdl_RF = GridSearchCV(model_RF, grid_params, scoring='accuracy', cv=4)
mdl_RF.fit(X_PCA,y)
mdl_RF.best_params_#{'max_depth': 6, 'n_estimators': 25}
mdl_RF.best_estimator_
mdl_RF.best_score_


#RandomForestClassifier
rndmf = RandomForestClassifier(max_depth=6, n_estimators=25, random_state=2)
rndmf.fit(X_train, y_train)
y_pred = rndmf.predict(X_test)

from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, classification_report

accuracy_score (y_test, y_pred)
confusion_matrix (y_test, y_pred)
print(classification_report (y_test, y_pred))

